/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
     ListNode *newlist = new ListNode();
     //Make a dummy node,now see if like whose value is lesser and then connect the new list with that node and move to the next node, we need to have three pointers one for each list!
     ListNode* i = l1;
     ListNode* j = l2;
     ListNode* k = newlist;
     //Iterating over both the lists and figuring out which element has to be joined in the new list.
     while(i && j)
     {   
         if(i->val  > j->val)
         {
             k->next = j;
             j = j->next;
             k = k->next;
         }
         else
         {
             k->next = i;
             i = i->next;
             k = k->next;
         }
     }
       
    while(i)
    {
             k->next = i;
             i = i->next;
             k = k->next;
    }
    while(j)
    {
             k->next = j;
             j = j->next;
             k = k->next;
    }
        return newlist->next;
        
    }
};
