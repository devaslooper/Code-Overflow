/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
        ListNode * temp = head, *prev = NULL;
        if(head == NULL)
        {
            return head;
        }
        if(head->next == NULL && temp->val == val)
        {
            head = temp->next;
            return NULL;
            
        }
        //For handling cases when the particular value elements come in first positions, as then head needs to be changed to remove those elements. For example [1,1,1,1], val = 1
        while(head && head->val == val)
        {
            head = head->next;
        }
        temp = head;
        //If an element is equal to the value then set the address in the previous node as the address of next node.
        while(temp != NULL)
        {
            if(temp->val == val)
            {
                prev->next = temp->next;
                temp = temp->next;
            }
            else
            {
                prev = temp;
                temp = temp->next;
            }
        }
        return head;
        //Modified linked list would be returned.
    }
};
