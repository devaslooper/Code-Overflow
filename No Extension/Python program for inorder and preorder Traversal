
# INORDER PREORDER 

class Node:
    
    def __init__(self,data):
        
        self.left = None
        self.right = None
        self.data = data
        
    def insert(self,data):
        if self.data:
            if data < self.data:
                if self.left is None:
                    self.left = Node(data)
                else:
                    self.left.insert(data)
            elif data > self.data:
                if self.right is None:
                    self.right = Node(data)
                else:
                    self.right.insert(data)
        else:
            self.data = data
            
    def printtree(self):
        if self.left:
            self.left.printtree()
        print(self.data)
        if self.right:
            self.right.printtree()
        
    def inorder(self,root):
        res = []
        if root:
            res = self.inorder(root.left)
            res.append(root.data)
            res = res + self.inorder(root.right)
        return res
    
    def preorder(self,root):
        res = []
        if root:
            res.append(root.data)
            res = res + self.preorder(root.left)
            res = res + self.preorder(root.right)
        return res
    

if __name__ == "__main__":
    l = ["a","b","c","d","e","f","g"]
    root = Node(l[0])
    for i in range(1,len(l)):
        root.insert(l[i])
    print(root.inorder(root))
    
    root = Node(l[0])
    for i in range(1,len(l)):
        root.insert(l[i])
    print(root.preorder(root))
    
